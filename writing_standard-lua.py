import argparse

parser = argparse.ArgumentParser()
parser.add_argument('path')
parser.add_argument('randomseed')
parser.add_argument('constrain')
args = parser.parse_args()

fastpm_path = args.path
randomseednumber = args.randomseed
constrain_arg = args.constrain

f = open('{0}/standard.lua'.format(fastpm_path),'w')

f.write('-- parameter file for fastpm \n')
f.write('nc = 176 \n')
f.write('boxsize = 10.0   -- Mpc \n')

f.write("if args[1] == 'za' then \n")
f.write('    za = true \n')
f.write('    -- force_mode = "pm" \n')
f.write('    force_mode = "fastpm" \n')
f.write('    time_step = {0.01} \n')
f.write("elseif args[1] == '2lpt' then \n")
f.write('    za = false \n')
f.write('    -- force_mode = "pm" \n')
f.write('    force_mode = "fastpm" \n')
f.write('    time_step = {0.01,1} \n')
f.write("elseif args[1] == 'cola' then \n")
f.write('    za = false \n')
f.write('    force_mode = "cola" \n')
f.write('    time_step = linspace(0.1, 1, 5) \n')
f.write("elseif args[1] == 'pm' then \n")
f.write('    za = false \n')
f.write('    force_mode = "pm" \n')
f.write('    time_step = linspace(0.1, 1, 5) \n')
f.write("elseif args[1] == 'zola' then \n")
f.write('    za = false \n')
f.write('    force_mode = "zola" \n')
f.write('    time_step = linspace(0.1, 1, 5) \n')
f.write("elseif args[1] == 'fastpm' then \n")
f.write('    za = false \n')
f.write('    force_mode = "fastpm" \n')
f.write('    time_step = { 0.01, 1 } \n')
f.write("elseif args[1] == 'ic' then \n")
f.write('    za = false \n')
f.write('    force_mode = "zola" \n')
f.write('    time_step = {0.1} \n')
f.write('else \n')
f.write('    error("wrong arg!") \n')
f.write('end \n')
f.write(' \n')
f.write('local function has(keyword) \n')
f.write('    for i,k in pairs(args) do \n')
f.write('        if k == keyword then \n')
f.write('            return true \n')
f.write('        end \n')
f.write('    end \n')
f.write('    return false \n')
f.write('end \n')
f.write("if has('lanczos3') then \n")
f.write('    painter_type = "lanczos" \n')
f.write('    painter_support = 6 \n')
f.write('end \n')
f.write("if has('lanczos2') then \n")
f.write('    painter_type = "lanczos" \n')
f.write('    painter_support = 4 \n')
f.write('end \n')
f.write("if has('linear1') then \n")
f.write('    painter_type = "linear" \n')
f.write('    painter_support = 2 \n')
f.write('end \n')
f.write("if has('linear2') then \n")
f.write('    painter_type = "linear" \n')
f.write('    painter_support = 4 \n')
f.write('end \n')
f.write("if has('inverted') then \n")
f.write('    inverted_ic = true \n')
f.write('else \n')
f.write('    inverted_ic = false \n')
f.write('end \n')

f.write("if has('fixed_mode') then \n")
f.write('    set_mode_method = "add" \n')
f.write('    set_mode = { \n')
f.write('            {0, 1, 0, 0, 0.1}, \n')
f.write('            {0, 1, 0, 1, 0.0}, \n')
f.write('            } \n')
f.write('end \n')
f.write(' \n')
f.write("if has('remove_variance') then \n")
f.write('    remove_cosmic_variance = true \n')
f.write('else \n')
f.write('    remove_cosmic_variance = false \n')
f.write('end \n')
f.write(' \n')
f.write("if has('shift') then \n")
f.write('    shift = true \n')
f.write('else \n')
f.write('    shift = false \n')
f.write('end \n')
f.write("if has('gaussian36') then \n")
f.write("    dealiasing_type = 'gaussian36' \n")
f.write('end \n')
f.write("if has('aggressive') then \n")
f.write("    dealiasing_type = 'aggressive' \n")
f.write('end \n')
f.write("if has('gaussian') then \n")
f.write("    dealiasing_type = 'gaussian' \n")
f.write('end \n')
f.write("if has('twothird') then \n")
f.write("    dealiasing_type = 'twothird' \n")
f.write('end \n')
f.write("if has('eastwood') then \n")
f.write("    kernel_type = 'eastwood' \n")
f.write('end \n')
f.write("if has('gadget') then \n")
f.write("    kernel_type = 'gadget' \n")
f.write('end \n')
f.write("if has('naive') then \n")
f.write("    kernel_type = 'naive' \n")
f.write('end \n')
f.write(' \n')
f.write("prefix = 'results' \n")
f.write('for i,k in pairs(args) do \n')
f.write('    if i > 0 then \n')
f.write("    prefix = prefix .. '-' .. k \n")
f.write('    end \n')
f.write('end \n')
f.write(' \n')
f.write('-------- Time Sequence ---- \n')
f.write('output_redshifts= { 99.0, 0.0 }  -- redshifts of output \n')
f.write(' \n')
f.write('-- Cosmology -- \n')
f.write('omega_m = 0.2814 \n')
f.write('h       = 0.697 \n')
f.write(' \n')
f.write("if has('lineark') then \n")
f.write("    read_lineark = 'results-ic/IC' \n")
f.write('else \n')
f.write('    read_powerspectrum = "/physics2/kuanweih/project_BH_seedmass/powerspectrum_wmap9_lin.txt" \n')
f.write(' \n')

f.write('    random_seed = {0} \n'.format(str(int(randomseednumber))))

f.write(' \n')
f.write("    if has('whitenoisek') then \n")
f.write("        read_whitenoisek = 'results-ic/IC' \n")
f.write('    end \n')
f.write('end \n')
f.write(' \n')
f.write("if has('fnl') then \n")
f.write('    -- FIXME: what? \n')
f.write('    f_nl_type = "local" \n')
f.write('    scalar_amp = 2.130624e-9 \n')
f.write('    scalar_pivot = 0.05 \n')
f.write('    scalar_spectral_index = 0.9667 \n')
f.write('    f_nl = 10.0 \n')
f.write('    kmax_primordial_over_knyquist = 0.25 \n')
f.write('else \n')
f.write('    f_nl_type = "none" \n')
f.write('end \n')
f.write('-------- Approximation Method --------------- \n')
f.write(' \n')
f.write('pm_nc_factor = {{0, 2}, {0.5, 3}}            -- Particle Mesh grid pm_nc_factor*nc per dimension in the beginning \n')
f.write(' \n')
f.write('np_alloc_factor= 4.0      -- Amount of memory allocated for particle \n')
f.write(' \n')
f.write('-------- Output --------------- \n')
f.write(' \n')
f.write('-- Dark matter particle outputs (all particles) \n')
f.write('write_snapshot= prefix .. "/fastpm"       -- comment out to suppress snapshot output \n')
f.write('-- 1d power spectrum (raw), without shotnoise correction \n')
f.write('write_powerspectrum = prefix .. "/powerspec" \n')
f.write('write_whitenoisek = prefix .. "/IC" \n')
f.write(' \n')
f.write('write_nonlineark = prefix .. "/fastpm" \n')
f.write('write_lineark = prefix .. "/IC" \n')
f.write(' \n')
f.write("if has('lightcone') then \n")
f.write('    write_lightcone = prefix .. "/lightcone" \n')
f.write('    dh_factor = 0.05 \n')
f.write('end \n')
f.write(' \n')
f.write("if has('constrain') then \n")
f.write('    constraints = { \n')

if constrain_arg == 'Con_1':
    f.write('        {boxsize * 0.5, boxsize * 0.5, boxsize * 0.5, 1.0}  \n')
elif constrain_arg == 'Con_2':
    f.write('        {boxsize * 0.5, boxsize * 0.5, boxsize * 0.5, 2.0}  \n')
else:
    f.write('        {boxsize * 0.5, boxsize * 0.5, boxsize * 0.5, 0.0}  \n')

f.write('       -- {boxsize * 0.25, boxsize * 0.25, boxsize * 0.5, 100.}, \n')
f.write('       -- {boxsize * 0.75, boxsize * 0.75, boxsize * 0.5, 100.}, \n')
f.write('    } \n')
f.write('end \n')

f.close()
